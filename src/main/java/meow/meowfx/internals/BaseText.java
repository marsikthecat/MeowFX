package meow.meowfx.internals;import javafx.geometry.Insets;import javafx.scene.control.Label;import javafx.scene.effect.DropShadow;import javafx.scene.paint.Color;import javafx.scene.text.Font;public abstract class BaseText extends Element<Label> {  public BaseText(String string) {    super(new Label(string));    getNode().setMaxWidth(Double.MAX_VALUE);    getNode().setWrapText(true);    getNode().maxWidthProperty().bind(getNode().prefWidthProperty());  }  public void font(int size, String family, Color color) {    getNode().setFont(new Font(family, size));    getNode().setTextFill(color);  }  public Font getFont() {    return getNode().getFont();  }  public void fontSize(int size) {    getNode().setFont(new Font(getNode().getFont().getFamily(), size));  }  public int getFontSize() {    return (int) getNode().getFont().getSize();  }  public void fontFamily(String family) {    getNode().setFont(new Font(family, getNode().getFont().getSize()));  }  public String getFontFamily() {    return getNode().getFont().getFamily();  }  public void fontColor(Color color) {    getNode().setTextFill(color);  }  public Color getFontColor() {    return (Color) getNode().getTextFill();  }  public void textShadow() {    DropShadow shadow = new DropShadow();    shadow.setRadius(8);    shadow.setOffsetX(3);    shadow.setOffsetY(3);    shadow.setColor(Color.rgb(0, 0, 0, 0.5));    getNode().setEffect(shadow);  }  public void letterSpacing(double spacing) {    appendStyleForNode("-fx-letter-spacing", String.valueOf(spacing));  }  public void hover(Color color) {    Color tempColor = getFontColor();    getNode().setOnMouseEntered(e -> getNode().setTextFill(color));    getNode().setOnMouseExited(e -> getNode().setTextFill(tempColor));  }  public void padding(int t, int r, int b, int l) {    getNode().setPadding(new Insets(t, r, b, l));  }  public void padding(int p) {    getNode().setPadding(new Insets(p));  }  public void noTextShadow() {    getNode().setEffect(null);  }  public void text(String string) {    getNode().setText(string);  }  public void appendText(String string) {    getNode().setText(getNode().getText() + string);  }  public int length() {    return getNode().getText().length();  }  public void removeOneLetter() {    String text = getNode().getText();    if (!text.isEmpty()) {      getNode().setText(text.substring(0, text.length() - 1));    }  }  public void clear() {    getNode().setText("");  }  public String getValue() {    return getNode().getText();  }  public void rotate(int degrees) {    getNode().setRotate(degrees);  }  public void bold() {    appendStyleForNode("-fx-font-weight","bold");  }  public void notBold() {    removeStyleForNode("-fx-font-weight");  }  public void italic() {    appendStyleForNode("-fx-font-style","italic");  }  public void notItalic() {    removeStyleForNode("-fx-font-style");  }  public void underLine() {    appendStyleForNode("-fx-underline","true");  }  public void notUnderLine() {    removeStyleForNode("-fx-underline");  }  public void strikeThrough() {    appendStyleForNode("-fx-strikethrough","true");  }  public void notStrikeThrough() {    removeStyleForNode("-fx-strikethrough");  }}